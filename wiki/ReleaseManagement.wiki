#summary Release Management

= Introduction =

Please keep in your mind the following release management rules:

  # Release early
  # Release often
  # Listen to your customer

Only released artifacts should be published (for future reference). This document shows how to manage release management with Maven and how to avoid tedious and error-prone manual tasks.

= Versioning =

Each release must be identified by unique version. It is important to keep versioning scheme consistent, e.g: `MAJOR.MINOR.FIX`, where:

  * `MAJOR` version must be incremented when any backwards incompatible changes are introduced.
  * `MINOR` version must be incremented if new, backwards compatible functionality is introduced.
  * `PATCH` version must be incremented if only backwards compatible bug fixes are introduced.

For further details please refer to [http://semver.org/ Semantic Versioning] article.

= SCM Layout = 

There are some standard, recommended ways to organize SCM (at least Subversion). For each project the following directories are created:

|| *Directory* || *Description* || *Tag/Branch Name* || *Application Version* ||
|| trunk || Main line of current development || N/A || MAJOR.MINOR-SNAPSHOT ||
|| branches || Bug fixing development || MAJOR.MINOR.x || MAJOR.MINOR.PATH-SNAPSHOT ||
|| tags || Markers for released revisions, never changed || MAJOR.MINOR or MAJOR.MINOR.PATCH || MAJOR.MINOR or MAJOR.MINOR.PATCH ||

= Release Management = 

This section documents Maven support for release management, aligned to the SCM layout and MAJOR.MINOR.FIX` versioning scheme.

== Minor Release ==

The most common scenario, when new minor release from trunk is released.

Pre-conditions:

  * Release in the trunk directory.
  * Application version in trunk: `1.0-SNAPSHOT`.

Perform a minor release (accept all defaults during interactive Maven session):

{{{
mvn release:prepare release:perform -DperformRelease=true
}}}

Post-conditions:

  * Application version in trunk: `1.1-SNAPSHOT`.
  * New tag _application-name-1.0_.
  * Application version in tag _application-name-1.0_: `1.0`.
  * Released artifacts (with sources and javadoc) are published into the repository.
  * Latest released version set to `1.0` in maven metadata (in the repository).
  * Project site is updated.

== Major Release ==

The scenario when new major release from trunk is released.

Pre-conditions:

  * Release in the trunk directory.
  * Application version in trunk: `1.1-SNAPSHOT`.

Perform a major release (accept all defaults during interactive Maven session):

{{{
mvn release:prepare release:perform -DperformRelease=true -DreleaseVersion=2.0
}}}

Post-conditions:

  * Application version in trunk: `2.1-SNAPSHOT`.
  * New tag _application-name-2.0_.
  * Application version in tag _application-name-2.0_: `2.0`.
  * Released artifacts (with sources and javadoc) are published into the repository.
  * Latest released version set to `2.0` in maven metadata (in the repository).
  * Project site is updated.

== Patch Release ==

The scenario when previously released version must be fixed. 

Pre-conditions (step 1):

  * Create a branch from tag _application-name-1.0_.
  * Application version in tag _application-name-1.0_: `1.0`.

Create branch (accept all defaults during interactive Maven session):

{{{
mvn release:branch  -DbranchName=application-name-1.0.x -DreleaseVersion=1.0.1-SNAPSHOT \
  -DupdateBranchVersions=true -DupdateWorkingCopyVersions=false \
  -DsuppressCommitBeforeBranch=true -DremoteTagging=false
}}}

The command seems to be complex. And it is, due to the [http://jira.codehaus.org/browse/MRELEASE-335 bug] in the Maven Release Plugin. By default `release:brach` goal commits intermediate results into the tag but created tags must not be modified (even if you can).

Post-conditions  (step 1):

  * Tag is unchanged.
  * New branch _application-name-1.0.x_.
  * Application version in branch _application-name-1.0.x_: `1.0.1-SNAPSHOT`.

Pre-conditions (Step 2):

  * Release in branch directory _application-name-1.0.x_.
  * Application version in branch _application-name-1.0.x_: `1.0.1-SNAPSHOT`.

Perform a patch release (accept all defaults during interactive Maven session):

{{{
mvn release:prepare release:perform -DperformRelease=true \
  -DupdateReleaseInfo=false -Dgoals=deploy
}}}

Parameter `updateReleaseInfo` is set to false to avoid metadata modification in the repository by Maven Deploy Plugin. For "patch" releases we don't want to modify the latest release. E.g: if the latest release was 2.0 and the "patch" 1.0.1 is released, metadata in the repository should still define 2.0 as a latest release, not 1.0.1.

Parameter `goals` specifies that only artifact (with sources and javadoc) will be deployed into repository. Project site will be unchanged (by default Maven Release Plugin calls deploy and deploy-site goals).

Post-conditions (Step 2):

  * Application version in branch _application-name-1.0.x_: `1.0.2-SNAPSHOT`.
  * New tag _application-name-1.0.1_.
  * Application version in tag _application-name-1.0.1_: `1.0.1`.
  * Released artifacts (with sources and javadoc) are published into the repository.
  * Latest released version is left unchanged in maven metadata (in the repository).
  * Project site is left unchanged.

= Release Automation = 

Release management can be automated with continuous integration (CI) server. CI server can be used for build and release management as well.

Advantages:

  * Minimal effort (or even no effort) to perform a release.
  * Released version is built in the independent and controlled CI server environment, not on developer workstations.

Disadvantages:

  * Must be configured (it can be tricky and complex).
  * CI server is needed.

== Build Plans ==

To configure release management by CI server, set build plan strategy as:

  * Manual build - for one-click, on demand release management.
  * Scheduled build - for fully automatic release at the end of Scrum or Kanban iteration.

To disable interactive Maven session use the `--batch-mode` or `-B` command line option, e.g for minor release automation:

{{{
mvn --batch-mode release:prepare release:perform -DperformRelease=true
}}}

*TODO:* How to automate major and patch releases?